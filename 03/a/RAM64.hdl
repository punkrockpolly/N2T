// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    
    // to select a particular register of the address xxxyyy: MSB xxx selects RAM, LSB yyy selects register
    DMux8Way(in=load, sel=address[0..2], a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8);
    DMux8Way(in=load, sel=address[3..5], a=l1, b=l2, c=l3, d=l4, e=l5, f=l6, g=l7, h=l8);

    RAM8(in=in, load=r1, address=l1, out=out1);
    RAM8(in=in, load=r2, address=l2, out=out2);
    RAM8(in=in, load=r3, address=l3, out=out3);
    RAM8(in=in, load=r4, address=l4, out=out4);
    RAM8(in=in, load=r5, address=l5, out=out5);
    RAM8(in=in, load=r6, address=l6, out=out6);
    RAM8(in=in, load=r7, address=l7, out=out7);
    RAM8(in=in, load=r8, address=l8, out=out8);

    Mux8Way16(a=out9, b=out10, c=out11, d=out12, e=out13, f=out14, g=out15, h=out16, sel=address[3..5], out=out);

}